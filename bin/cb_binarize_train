#!/usr/bin/env python3
import torch
import lm_util
from cb_unet import UNet, evaluate_binarization_improvement
from dagtasets import Dibco
import lm_util
import sys

p={
    "model_path":"/tmp/binarizer.pt",
    "log_freq":10,
    "lr":.1,
    "epochs":10,
    "device":"cuda",
}

p, _ = lm_util.get_arg_switches(p,sys.argv,return_named_tuple=True)

device=torch.device(p.device)

trainset = Dibco(["2009_HW", "2009_P", "2010", "2011_P", "2011_HW", "2012", "2013", "2014", "2016", "2017"])
testset = Dibco(["2018"])

trainloader=torch.utils.data.DataLoader(trainset,shuffle=True)
valloader=torch.utils.data.DataLoader(testset,shuffle=True,batch_size=1)

try:
    net = UNet.load(p.model_path)
except:
    net = UNet(n_channels=2, n_classes=2)

net = net.to(device)

optim = torch.optim.Adam(net.parameters())
criterion=torch.nn.BCEWithLogitsLoss()

for epoch in range(p.epochs):
    for input_img, gt in trainloader:
        optim.zero_grad()
        input_img, gt = input_img.to(device),gt.to(device)
        prediction = net(input_img)
        loss = criterion(prediction, gt).sum()
        loss.backward()
        optim.step()
